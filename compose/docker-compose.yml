version: "3.9"
services:
  api:
    image: iotportaldevicemanagement-api
    container_name: iotportaldevicemanagement-api
    labels:
      - "com.iotportaldevicemanagement.product=iotportaldevicemanagement"
    logging:
      driver: "json-file"
      options:
        max-size: "500k"
        max-file: "10"
    restart: always
    depends_on:
      - postgres
      - redis
      - vernemq
    environment:
      - ROLE=api

      - APP_NAME=${APP_NAME}
      - APP_ENV=${APP_ENV}
      - APP_KEY=${APP_KEY}
      - APP_DEBUG=${APP_DEBUG}
      - APP_HOST=${APP_HOST}
      - APP_URL=${APP_URL}
      - FRONTEND_URL=${FRONTEND_URL}
      - SANCTUM_STATEFUL_DOMAINS=${SANCTUM_STATEFUL_DOMAINS}

      - LOG_CHANNEL=${LOG_CHANNEL}
      - LOG_DEPRECATIONS_CHANNEL=${LOG_DEPRECATIONS_CHANNEL}
      - LOG_LEVEL=${LOG_LEVEL}

      - DB_CONNECTION=${DB_CONNECTION}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_DATABASE=${DB_DATABASE}
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_SSLMODE=${DB_SSLMODE}
      - DB_SSLROOTCERT=${DB_SSLROOTCERT}

      - BROADCAST_DRIVER=${BROADCAST_DRIVER}
      - CACHE_DRIVER=${CACHE_DRIVER}
      - FILESYSTEM_DISK=${FILESYSTEM_DISK}
      - QUEUE_CONNECTION=${QUEUE_CONNECTION}
      - SESSION_DRIVER=${SESSION_DRIVER}
      - SESSION_LIFETIME=${SESSION_LIFETIME}

      - MEMCACHED_HOST=${MEMCACHED_HOST}

      - REDIS_CLIENT=${REDIS_CLIENT}
      - REDIS_SCHEME=${REDIS_SCHEME}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_USERNAME=${REDIS_USERNAME}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_VERIFY_PEER=${REDIS_VERIFY_PEER}
      - REDIS_CAFILE=${REDIS_CAFILE}

      - MAIL_MAILER=${MAIL_MAILER}
      - MAIL_HOST=${MAIL_HOST}
      - MAIL_PORT=${MAIL_PORT}
      - MAIL_USERNAME=${MAIL_USERNAME}
      - MAIL_PASSWORD=${MAIL_PASSWORD}
      - MAIL_ENCRYPTION=${MAIL_ENCRYPTION}
      - MAIL_FROM_ADDRESS=${MAIL_FROM_ADDRESS}
      - MAIL_FROM_NAME=${MAIL_FROM_NAME}

      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION}
      - AWS_BUCKET=${AWS_BUCKET}
      - AWS_USE_PATH_STYLE_ENDPOINT=${AWS_USE_PATH_STYLE_ENDPOINT}

      - PUSHER_APP_ID=${PUSHER_APP_ID}
      - PUSHER_APP_KEY=${PUSHER_APP_KEY}
      - PUSHER_APP_SECRET=${PUSHER_APP_SECRET}
      - PUSHER_APP_CLUSTER=${PUSHER_APP_CLUSTER}

      - MIX_PUSHER_APP_KEY=${MIX_PUSHER_APP_KEY}
      - MIX_PUSHER_APP_CLUSTER=${MIX_PUSHER_APP_CLUSTER}

      - MQTT_EXTERNAL_ENDPOINT=${MQTT_EXTERNAL_ENDPOINT}
      - MQTT_HOST=${MQTT_HOST}
      - MQTT_PORT=${MQTT_PORT}
      - MQTT_CLIENT_ID_PREFIX=${MQTT_CLIENT_ID_PREFIX}
      - MQTT_CLIENT_ID=${MQTT_CLIENT_ID}
      - MQTT_CLEAN_SESSION=${MQTT_CLEAN_SESSION}
      - MQTT_ENABLE_LOGGING=${MQTT_ENABLE_LOGGING}
      - MQTT_TLS_ENABLED=${MQTT_TLS_ENABLED}
      - MQTT_TLS_ALLOW_SELF_SIGNED_CERT=${MQTT_TLS_ALLOW_SELF_SIGNED_CERT}
      - MQTT_TLS_VERIFY_PEER=${MQTT_TLS_VERIFY_PEER}
      - MQTT_TLS_VERIFY_PEER_NAME=${MQTT_TLS_VERIFY_PEER_NAME}
      - MQTT_TLS_CA_FILE=${MQTT_TLS_CA_FILE}
      - MQTT_TLS_CA_PATH=${MQTT_TLS_CA_PATH}
      - MQTT_TLS_CLIENT_CERT_FILE=${MQTT_TLS_CLIENT_CERT_FILE}
      - MQTT_TLS_CLIENT_CERT_KEY_FILE=${MQTT_TLS_CLIENT_CERT_KEY_FILE}
      - MQTT_TLS_CLIENT_CERT_KEY_PASSPHRASE=${MQTT_TLS_CLIENT_CERT_KEY_PASSPHRASE}
      - MQTT_AUTH_USERNAME=${MQTT_AUTH_USERNAME}
      - MQTT_AUTH_PASSWORD=${MQTT_AUTH_PASSWORD}
      - MQTT_LAST_WILL_TOPIC=${MQTT_LAST_WILL_TOPIC}
      - MQTT_LAST_WILL_MESSAGE=${MQTT_LAST_WILL_MESSAGE}
      - MQTT_LAST_WILL_QUALITY_OF_SERVICE=${MQTT_LAST_WILL_QUALITY_OF_SERVICE}
      - MQTT_LAST_WILL_RETAIN=${MQTT_LAST_WILL_RETAIN}
      - MQTT_CONNECT_TIMEOUT=${MQTT_CONNECT_TIMEOUT}
      - MQTT_SOCKET_TIMEOUT=${MQTT_SOCKET_TIMEOUT}
      - MQTT_RESEND_TIMEOUT=${MQTT_RESEND_TIMEOUT}
      - MQTT_KEEP_ALIVE_INTERVAL=${MQTT_KEEP_ALIVE_INTERVAL}
    volumes:
#      - api-bootstrap-cache:/var/www/html/bootstrap/cache
#      - api-storage-app:/var/www/html/storage/app
#      - api-storage-framework:/var/www/html/storage/framework
      - certificates:/certificates
    networks:
      - internal

  nginx:
    image: iotportaldevicemanagement-nginx
    container_name: iotportaldevicemanagement-nginx
    labels:
      - "com.iotportaldevicemanagement.product=iotportaldevicemanagement"
    logging:
      driver: "json-file"
      options:
        max-size: "500k"
        max-file: "10"
    restart: always
    depends_on:
      - api
      - web
    volumes:
#      - nginx-run:/run
#      - nginx-cache:/var/cache/nginx
      - nginx-certificates:/certificates
    ports:
      - "${NGINX_HTTP_PORT:-80}:80"
      - "${NGINX_HTTPS_PORT:-443}:443"
    networks:
      - internal

  postgres:
    image: iotportaldevicemanagement-postgres
    container_name: iotportaldevicemanagement-postgres
    labels:
      - "com.iotportaldevicemanagement.product=iotportaldevicemanagement"
    logging:
      driver: "json-file"
      options:
        max-size: "500k"
        max-file: "10"
    restart: always
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
#      - postgres-run:/var/run/postgresql
#      - postgres-data:/var/lib/postgresql/data
      - postgres-certificates:/certificates
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    networks:
      - internal

  queue-worker:
    image: iotportaldevicemanagement-api
    container_name: iotportaldevicemanagement-queue-worker
    labels:
      - "com.iotportaldevicemanagement.product=iotportaldevicemanagement"
    logging:
      driver: "json-file"
      options:
        max-size: "500k"
        max-file: "10"
    restart: always
    depends_on:
      - postgres
      - redis
      - vernemq
    environment:
      - ROLE=queue-worker

      - APP_NAME=${APP_NAME}
      - APP_ENV=${APP_ENV}
      - APP_KEY=${APP_KEY}
      - APP_DEBUG=${APP_DEBUG}
      - APP_HOST=${APP_HOST}
      - APP_URL=${APP_URL}
      - FRONTEND_URL=${FRONTEND_URL}
      - SANCTUM_STATEFUL_DOMAINS=${SANCTUM_STATEFUL_DOMAINS}

      - LOG_CHANNEL=${LOG_CHANNEL}
      - LOG_DEPRECATIONS_CHANNEL=${LOG_DEPRECATIONS_CHANNEL}
      - LOG_LEVEL=${LOG_LEVEL}

      - DB_CONNECTION=${DB_CONNECTION}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_DATABASE=${DB_DATABASE}
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_SSLMODE=${DB_SSLMODE}
      - DB_SSLROOTCERT=${DB_SSLROOTCERT}

      - BROADCAST_DRIVER=${BROADCAST_DRIVER}
      - CACHE_DRIVER=${CACHE_DRIVER}
      - FILESYSTEM_DISK=${FILESYSTEM_DISK}
      - QUEUE_CONNECTION=${QUEUE_CONNECTION}
      - SESSION_DRIVER=${SESSION_DRIVER}
      - SESSION_LIFETIME=${SESSION_LIFETIME}

      - MEMCACHED_HOST=${MEMCACHED_HOST}

      - REDIS_CLIENT=${REDIS_CLIENT}
      - REDIS_SCHEME=${REDIS_SCHEME}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_USERNAME=${REDIS_USERNAME}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_VERIFY_PEER=${REDIS_VERIFY_PEER}
      - REDIS_CAFILE=${REDIS_CAFILE}

      - MAIL_MAILER=${MAIL_MAILER}
      - MAIL_HOST=${MAIL_HOST}
      - MAIL_PORT=${MAIL_PORT}
      - MAIL_USERNAME=${MAIL_USERNAME}
      - MAIL_PASSWORD=${MAIL_PASSWORD}
      - MAIL_ENCRYPTION=${MAIL_ENCRYPTION}
      - MAIL_FROM_ADDRESS=${MAIL_FROM_ADDRESS}
      - MAIL_FROM_NAME=${MAIL_FROM_NAME}

      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION}
      - AWS_BUCKET=${AWS_BUCKET}
      - AWS_USE_PATH_STYLE_ENDPOINT=${AWS_USE_PATH_STYLE_ENDPOINT}

      - PUSHER_APP_ID=${PUSHER_APP_ID}
      - PUSHER_APP_KEY=${PUSHER_APP_KEY}
      - PUSHER_APP_SECRET=${PUSHER_APP_SECRET}
      - PUSHER_APP_CLUSTER=${PUSHER_APP_CLUSTER}

      - MIX_PUSHER_APP_KEY=${MIX_PUSHER_APP_KEY}
      - MIX_PUSHER_APP_CLUSTER=${MIX_PUSHER_APP_CLUSTER}

      - MQTT_EXTERNAL_ENDPOINT=${MQTT_EXTERNAL_ENDPOINT}
      - MQTT_HOST=${MQTT_HOST}
      - MQTT_PORT=${MQTT_PORT}
      - MQTT_CLIENT_ID_PREFIX=${MQTT_CLIENT_ID_PREFIX}
      - MQTT_CLIENT_ID=${MQTT_CLIENT_ID}
      - MQTT_CLEAN_SESSION=${MQTT_CLEAN_SESSION}
      - MQTT_ENABLE_LOGGING=${MQTT_ENABLE_LOGGING}
      - MQTT_TLS_ENABLED=${MQTT_TLS_ENABLED}
      - MQTT_TLS_ALLOW_SELF_SIGNED_CERT=${MQTT_TLS_ALLOW_SELF_SIGNED_CERT}
      - MQTT_TLS_VERIFY_PEER=${MQTT_TLS_VERIFY_PEER}
      - MQTT_TLS_VERIFY_PEER_NAME=${MQTT_TLS_VERIFY_PEER_NAME}
      - MQTT_TLS_CA_FILE=${MQTT_TLS_CA_FILE}
      - MQTT_TLS_CA_PATH=${MQTT_TLS_CA_PATH}
      - MQTT_TLS_CLIENT_CERT_FILE=${MQTT_TLS_CLIENT_CERT_FILE}
      - MQTT_TLS_CLIENT_CERT_KEY_FILE=${MQTT_TLS_CLIENT_CERT_KEY_FILE}
      - MQTT_TLS_CLIENT_CERT_KEY_PASSPHRASE=${MQTT_TLS_CLIENT_CERT_KEY_PASSPHRASE}
      - MQTT_AUTH_USERNAME=${MQTT_AUTH_USERNAME}
      - MQTT_AUTH_PASSWORD=${MQTT_AUTH_PASSWORD}
      - MQTT_LAST_WILL_TOPIC=${MQTT_LAST_WILL_TOPIC}
      - MQTT_LAST_WILL_MESSAGE=${MQTT_LAST_WILL_MESSAGE}
      - MQTT_LAST_WILL_QUALITY_OF_SERVICE=${MQTT_LAST_WILL_QUALITY_OF_SERVICE}
      - MQTT_LAST_WILL_RETAIN=${MQTT_LAST_WILL_RETAIN}
      - MQTT_CONNECT_TIMEOUT=${MQTT_CONNECT_TIMEOUT}
      - MQTT_SOCKET_TIMEOUT=${MQTT_SOCKET_TIMEOUT}
      - MQTT_RESEND_TIMEOUT=${MQTT_RESEND_TIMEOUT}
      - MQTT_KEEP_ALIVE_INTERVAL=${MQTT_KEEP_ALIVE_INTERVAL}
    volumes:
#      - queue-worker-bootstrap-cache:/var/www/html/bootstrap/cache
#      - api-storage-app:/var/www/html/storage/app
#      - queue-worker-storage-framework:/var/www/html/storage/framework
      - certificates:/certificates
    networks:
      - internal

  redis:
    image: iotportaldevicemanagement-redis
    container_name: iotportaldevicemanagement-redis
    labels:
      - "com.iotportaldevicemanagement.product=iotportaldevicemanagement"
    logging:
      driver: "json-file"
      options:
        max-size: "500k"
        max-file: "10"
    restart: always
    volumes:
#      - redis-acl:/etc/redis/acl
#      - redis-data:/data
      - redis-certificates:/certificates
    ports:
      - "${DOCKER_REDIS_PORT:-6379}:6379"
    networks:
      - internal

  vernemq:
    image: iotportaldevicemanagement-vernemq
    container_name: iotportaldevicemanagement-vernemq
    labels:
      - "com.iotportaldevicemanagement.product=iotportaldevicemanagement"
    logging:
      driver: "json-file"
      options:
        max-size: "500k"
        max-file: "10"
    restart: always
    environment:
      - DOCKER_VERNEMQ_ACCEPT_EULA=${DOCKER_VERNEMQ_ACCEPT_EULA}
      - DOCKER_VERNEMQ_ALLOW_ANONYMOUS=${DOCKER_VERNEMQ_ALLOW_ANONYMOUS}
      - DOCKER_VERNEMQ_MAX_CLIENT_ID_SIZE=${DOCKER_VERNEMQ_MAX_CLIENT_ID_SIZE}
      - DOCKER_VERNEMQ_LOG__CONSOLE=${DOCKER_VERNEMQ_LOG__CONSOLE}
      - DOCKER_VERNEMQ_SYSTREE_ENABLED=${DOCKER_VERNEMQ_SYSTREE_ENABLED}
      - DOCKER_VERNEMQ_LISTENER__SSL__DEFAULT=${DOCKER_VERNEMQ_LISTENER__SSL__DEFAULT}
      - DOCKER_VERNEMQ_LISTENER__SSL__CAFILE=${DOCKER_VERNEMQ_LISTENER__SSL__CAFILE}
      - DOCKER_VERNEMQ_LISTENER__SSL__CERTFILE=${DOCKER_VERNEMQ_LISTENER__SSL__CERTFILE}
      - DOCKER_VERNEMQ_LISTENER__SSL__KEYFILE=${DOCKER_VERNEMQ_LISTENER__SSL__KEYFILE}
      - DOCKER_VERNEMQ_LISTENER__SSL__CIPHERS=${DOCKER_VERNEMQ_LISTENER__SSL__CIPHERS}
      - DOCKER_VERNEMQ_PLUGINS__VMQ_ACL=${DOCKER_VERNEMQ_PLUGINS__VMQ_ACL}
      - DOCKER_VERNEMQ_PLUGINS__VMQ_WEBHOOKS=${DOCKER_VERNEMQ_PLUGINS__VMQ_WEBHOOKS}
      - DOCKER_VERNEMQ_VMQ_WEBHOOKS__AUTH_ON_REGISTER__HOOK=${DOCKER_VERNEMQ_VMQ_WEBHOOKS__AUTH_ON_REGISTER__HOOK}
      - DOCKER_VERNEMQ_VMQ_WEBHOOKS__AUTH_ON_REGISTER__ENDPOINT=${DOCKER_VERNEMQ_VMQ_WEBHOOKS__AUTH_ON_REGISTER__ENDPOINT}
      - DOCKER_VERNEMQ_VMQ_WEBHOOKS__AUTH_ON_SUBSCRIBE__HOOK=${DOCKER_VERNEMQ_VMQ_WEBHOOKS__AUTH_ON_SUBSCRIBE__HOOK}
      - DOCKER_VERNEMQ_VMQ_WEBHOOKS__AUTH_ON_SUBSCRIBE__ENDPOINT=${DOCKER_VERNEMQ_VMQ_WEBHOOKS__AUTH_ON_SUBSCRIBE__ENDPOINT}
      - DOCKER_VERNEMQ_VMQ_WEBHOOKS__AUTH_ON_PUBLISH__HOOK=${DOCKER_VERNEMQ_VMQ_WEBHOOKS__AUTH_ON_PUBLISH__HOOK}
      - DOCKER_VERNEMQ_VMQ_WEBHOOKS__AUTH_ON_PUBLISH__ENDPOINT=${DOCKER_VERNEMQ_VMQ_WEBHOOKS__AUTH_ON_PUBLISH__ENDPOINT}
      - DOCKER_VERNEMQ_VMQ_WEBHOOKS__ON_CLIENT_OFFLINE__HOOK=${DOCKER_VERNEMQ_VMQ_WEBHOOKS__ON_CLIENT_OFFLINE__HOOK}
      - DOCKER_VERNEMQ_VMQ_WEBHOOKS__ON_CLIENT_OFFLINE__ENDPOINT=${DOCKER_VERNEMQ_VMQ_WEBHOOKS__ON_CLIENT_OFFLINE__ENDPOINT}
      - DOCKER_VERNEMQ_VMQ_WEBHOOKS__ON_CLIENT_GONE__HOOK=${DOCKER_VERNEMQ_VMQ_WEBHOOKS__ON_CLIENT_GONE__HOOK}
      - DOCKER_VERNEMQ_VMQ_WEBHOOKS__ON_CLIENT_GONE__ENDPOINT=${DOCKER_VERNEMQ_VMQ_WEBHOOKS__ON_CLIENT_GONE__ENDPOINT}
      - DOCKER_VERNEMQ_VMQ_WEBHOOKS__CAFILE=${DOCKER_VERNEMQ_VMQ_WEBHOOKS__CAFILE}
      - DOCKER_VERNEMQ_VMQ_WEBHOOKS__USE_CRLS=${DOCKER_VERNEMQ_VMQ_WEBHOOKS__USE_CRLS}
    volumes:
#      - vernemq-etc:/vernemq/etc
#      - vernemq-data:/vernemq/data
#      - vernemq-tmp:/tmp
      - vernemq-certificates:/certificates
    ports:
      - "${VERNEMQ_SSL_PORT:-8883}:8883"
    networks:
      - internal

  web:
    image: iotportaldevicemanagement-web
    container_name: iotportaldevicemanagement-web
    labels:
      - "com.iotportaldevicemanagement.product=iotportaldevicemanagement"
    logging:
      driver: "json-file"
      options:
        max-size: "500k"
        max-file: "10"
    restart: always
    environment:
      - NODE_ENV=${NODE_ENV}
      - NEXT_TELEMETRY_DISABLED=${NEXT_TELEMETRY_DISABLED}
      - NEXT_PUBLIC_BACKEND_URL=${NEXT_PUBLIC_BACKEND_URL}
#    volumes:
#      - web-npm:/home/web/.npm
    networks:
      - internal

networks:
  internal:
    driver: bridge

volumes:
  certificates:
    external: true
    name: iotportaldevicemanagement_certificates
  nginx-certificates:
    external: true
    name: iotportaldevicemanagement_nginx-certificates
  postgres-certificates:
    external: true
    name: iotportaldevicemanagement_postgres-certificates
  redis-acl:
    external: true
    name: iotportaldevicemanagement_redis-acl
  redis-certificates:
    external: true
    name: iotportaldevicemanagement_redis-certificates
  vernemq-certificates:
    external: true
    name: iotportaldevicemanagement_vernemq-certificates

# docker compose -f compose/docker-compose.yml -p iotportaldevicemanagement --env-file .env.production up -d
# docker compose -f compose/docker-compose.yml -p iotportaldevicemanagement --env-file .env.production down
